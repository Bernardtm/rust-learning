fn main() {
    // Inteiros
    let number: u8 = 14; // inteiro de 8 bits sem sinal
    let number: i8 = 14; // inteiro de 8 bits com sinal
    let number: u16 = 14; // inteiro de 16 bits sem sinal
    let number: i16 = 14; // inteiro de 16 bits com sinal
    let number: u32 = 14; // inteiro de 32 bits sem sinal
    let number: i32 = 14; // inteiro de 32 bits com sinal
    let number: u64 = 14; // inteiro de 64 bits sem sinal
    let number: i64 = 14; // inteiro de 64 bits com sinal
    let number: u128 = 14; // inteiro de 128 bits sem sinal
    let number: i128 = 14; // inteiro de 128 bits com sinal
    let number: usize = 14; // inteiro de x bits sem sinal, depende da arquitetura
    let number: isize = 14; // inteiro de x bits com sinal, depende da arquitetura
    // por padrao, os inteiros sao do tipo i32

    // Ponto flutuante
    let number: f32 = 14.0; // ponto flutuante de 32 bits
    let number: f64 = 14.0; // ponto flutuante de 64 bits
    // por padrao, os pontos flutuantes sao do tipo f64

    // Operations Examples
    // Addition, Subtraction, and Multiplication
    println!("1 + 2 = {} and 8 - 5 = {} and 15 * 3 = {}", 1u32 + 2, 8i32 - 5, 15 * 3);

    // Integer and Floating point division
    println!("9 / 2 = {} but 9.0 / 2.0 = {}", 9u32 / 2, 9.0 / 2.0);
    /*
       Quando chamamos a macro println, adicionamos o sufixo de tipo de dados a cada n√∫mero literal 
       para informar o tipo de dados ao Rust. A sintaxe 1u32 informa ao compilador que o valor √© o 
       n√∫mero 1 e para interpretar o valor como um inteiro de 32 bits sem sinal.

        Se n√£o fornecermos anota√ß√µes de tipo, o Rust tentar√° inferir o tipo do contexto. 
        Quando o contexto √© amb√≠guo, ele atribui o tipo i32 (um inteiro com sinal de 32 bits) por padr√£o.
     */

    // Booleans - true or false
    // Declare variable to store result of "greater than" test, Is 1 > 4? -- false
    let is_bigger = 1 > 4;
    println!("Is 1 > 4? {}", is_bigger);  // false

    // Text - Char
    // Todos os tipos de texto s√£o representa√ß√µes UTF-8 v√°lidas.
    let letter = 'A';
    let smiley_face = 'üòä';
    /* Algumas linguagens tratam os tipos char como inteiros sem sinal de 8 bits, 
    que √© equivalente do tipo u8 do Rust. O tipo char no Rust cont√©m pontos de c√≥digo Unicode, 
    mas n√£o usam a codifica√ß√£o UTF-8. Um char no Rust √© um inteiro de 21 bits que √© preenchido para ter 32 bits. 
    O char cont√©m o valor de ponto de c√≥digo simples diretamente.
    */

    // Text - Cadeias de caracteres
    /*
    O tipo str, tamb√©m conhecido como uma fatia de cadeia de caracteres, 
    √© uma exibi√ß√£o dos dados de cadeia de caracteres.
     Na maioria das vezes, nos referimos a esses tipos usando a sintaxe de estilo de refer√™ncia que precede o tipo com o E comercial &str. 
     Abordaremos as refer√™ncias nos m√≥dulos a seguir. Por enquanto, voc√™ pode considerar &str como um ponteiro para dados de cadeia de caracteres imut√°veis. 
     Os literais de cadeia de caracteres s√£o do tipo &str.

    Embora usar literais de cadeia de caracteres em exemplos introdut√≥rios do Rust seja conveniente, 
    eles n√£o s√£o adequados para todas as situa√ß√µes em que queremos usar um texto. 
    Nem toda cadeia de caracteres pode ser conhecida no tempo de compila√ß√£o. 
    Um exemplo disso ocorre quando um usu√°rio interage com um programa durante o runtime e envia um texto por meio de um terminal.

    Para esses cen√°rios, o Rust tem um segundo tipo de cadeia de caracteres chamado String. Esse tipo √© alocado no heap. 
    Quando voc√™ usa o tipo String, o comprimento da cadeia de caracteres (n√∫mero de caracteres) n√£o precisa ser conhecido antes da compila√ß√£o do c√≥digo.

    Observa√ß√£o

    Se voc√™ estiver familiarizado com uma linguagem com coleta de lixo, talvez esteja se perguntando por que o Rust tem dois tipos de cadeia de caracteres.
    1 Cadeias de caracteres s√£o tipos de dados extremamente complexos. A maioria das linguagens usa os respectivos coletores de lixo para mitigar essa complexidade.
    Enquanto linguagem do sistema, o Rust exp√µe parte da complexidade inerente das cadeias de caracteres. Com essa complexidade adicional, 
    vem uma quantidade muito refinada de controle sobre como a mem√≥ria √© usada no programa.

    1 _Na verdade, o Rust tem mais que dois tipos de cadeia de caracteres. 
    Neste m√≥dulo, abordamos apenas os tipos String e &str. 
    Na documenta√ß√£o do Rust, saiba mais sobre os tipos de cadeia de caracteres oferecidos.

    N√£o vamos ter uma ideia completa da diferen√ßa entre String e &str at√© conhecermos a propriedade e o sistema de empr√©stimo do Rust. 
    At√© l√°, voc√™ pode pensar em dados de tipo String como dados de texto que podem mudar conforme o programa √© executado. 
    As refer√™ncias &str s√£o exibi√ß√µes imut√°veis nos dados de texto que n√£o se alteram conforme o programa √© executado.
    */
    // Specify the data type "char"
    let character_1: char = 'S';
    let character_2: char = 'f';
    
    // Compiler interprets a single item in quotations as the "char" data type
    let smiley_face = 'üòÉ';

    // Compiler interprets a series of items in quotations as a "str" data type and creates a "&str" reference
    let string_1 = "miley ";

    // Specify the data type "str" with the reference syntax "&str"
    let string_2: &str = "ace";

    println!("{} is a {}{}{}{}.", smiley_face, character_1, string_1, character_2, string_2);

    // Tuples
    /* Uma tupla √© um agrupamento de valores de tipos diferentes coletados em um valor composto. 
    Os valores individuais em uma tupla s√£o chamados de elementos. 
    Os valores s√£o especificados como uma lista separada por v√≠rgulas colocada entre par√™nteses (<value>, <value>, ...).

    Uma tupla tem um comprimento fixo, que √© igual ao n√∫mero de elementos que ela cont√©m. 
    Depois que uma tupla √© declarada, ela n√£o pode aumentar ou diminuir de tamanho. 
    Elementos n√£o podem ser adicionados nem removidos. 
    O tipo de dados de uma tupla √© definido pela sequ√™ncia dos tipos de dados dos elementos. 
    */
    // Tuple of length 3
    let tuple_e = ('E', 5i32, true);
    /* Os elementos em uma tupla podem ser acessados pela posi√ß√£o do √≠ndice, come√ßando em zero. 
    Esse processo √© conhecido como indexa√ß√£o de tupla. Para acessar um elemento em uma tupla, usamos a sintaxe <tuple>.<index>. 
    */
    // Use tuple indexing and show the values of the elements in the tuple
    println!("Is '{}' the {}th letter of the alphabet? {}", tuple_e.0, tuple_e.1, tuple_e.2);

    // Struct
    /* Um struct √© um tipo que √© composto de outros tipos. 
    Os elementos em um struct s√£o chamados de campos. 
    Assim como as tuplas, os campos em um struct podem ter tipos de dados diferentes. 
    Um benef√≠cio significativo do tipo de struct √© que voc√™ pode nomear cada campo para que seja claro o que o valor significa.

    Para trabalhar com structs em um programa Rust, voc√™ primeiro define o struct por nome e especifica o tipo de dados para cada campo. 
    Em seguida, voc√™ cria uma inst√¢ncia do struct com outro nome. Ao declarar a inst√¢ncia, voc√™ fornece os valores espec√≠ficos para os campos.

    O Rust d√° suporte a tr√™s tipos de struct: structs cl√°ssicos, structs de tupla e structs de unidade. 
    Esses tipos de struct d√£o suporte a maneiras diferentes de agrupar dados e trabalhar com eles.

    - Os structs C cl√°ssicos s√£o os mais usados. Cada campo no struct tem um nome e um tipo de dados.
     Depois que um struct cl√°ssico √© definido, os campos no struct podem ser acessados usando a sintaxe <struct>.<field>.
    - Os structs de tupla s√£o semelhantes aos structs cl√°ssicos, mas os campos deles n√£o t√™m nomes. 
    Para acessar os campos em um struct de tupla, usamos a mesma sintaxe que usamos para indexar uma tupla: <tuple>.<index>. 
    Assim como nas tuplas, os valores de √≠ndice no struct de tupla come√ßam em zero.
    - Os structs de unidade s√£o usados com mais frequ√™ncia como marcadores. 
    Descobriremos mais sobre por que os structs de unidade s√£o √∫teis quando conhecermos o recurso de caracter√≠sticas(trait) do Rust.

    Ao contr√°rio da conven√ß√£o de nomenclatura que j√° utilizamos at√© agora, o nome de um tipo de struct √© em mai√∫sculas.

    Os tipos de struct geralmente s√£o definidos fora da fun√ß√£o main e de outras fun√ß√µes no programa Rust. 
    Por esse motivo, o in√≠cio da defini√ß√£o de struct n√£o √© recuado da margem esquerda. 
    Somente a parte interna da defini√ß√£o √© recuada para mostrar como os dados s√£o organizados.
    */
    // Classic struct with named fields
    struct Student { name: String, level: u8, remote: bool } // Uma defini√ß√£o de struct cl√°ssico n√£o termina com um ponto e v√≠rgula.

    // Tuple struct with data types only
    struct Grades(char, char, char, char, f32); 
    /* Assim como em uma tupla, o corpo de um struct de tupla √© definido dentro de par√™nteses (). 
    Os par√™nteses ficam logo ap√≥s o nome do struct. 
    N√£o h√° espa√ßo entre o nome do struct e o par√™ntese de abertura.
    */

    // Unit struct
    struct Unit;

    // Instantiating a struct
    // Instantiate classic struct, specify fields in random order, or in specified order
    let user_1 = Student { name: String::from("Constance Sharma"), remote: true, level: 2 };
    let user_2 = Student { name: String::from("Dyson Tan"), level: 5, remote: false };
    // como o tipo eh String, devemos usar o String::from para criar uma nova string, se nao identificara como &str
    // O compilador sugere que podemos usar a fun√ß√£o .to_string() para fazer a convers√£o.

    // Instantiate tuple structs, pass values in same order as types defined
    let mark_1 = Grades('A', 'A', 'B', 'A', 3.75);
    let mark_2 = Grades('B', 'A', 'A', 'C', 3.25);

    println!("{}, level {}. Remote: {}. Grades: {}, {}, {}, {}. Average: {}", 
            user_1.name, user_1.level, user_1.remote, mark_1.0, mark_1.1, mark_1.2, mark_1.3, mark_1.4);
    println!("{}, level {}. Remote: {}. Grades: {}, {}, {}, {}. Average: {}", 
            user_2.name, user_2.level, user_2.remote, mark_2.0, mark_2.1, mark_2.2, mark_2.3, mark_2.4);


    // Enums
    /* Usamos a palavra-chave enum para criar um tipo enumerado, que pode ter qualquer combina√ß√£o das variantes de enumera√ß√£o. 
    Assim como os structs, as variantes de enumera√ß√£o podem ter campos com nomes, campos sem nomes ou nenhum campo. 
    Os tipos de enumera√ß√£o, assim como os tipos de struct, tamb√©m s√£o escritos em mai√∫sculas. 
    */
    enum WebEvent {
        // An enum variant can be like a unit struct without fields or data types
        WELoad, // n√£o tem nenhum dado nem tipo de dados associado.
        // An enum variant can be like a tuple struct with data types but no named fields
        WEKeys(String, char), // tem dois campos com os tipos de dados String e char.
        // An enum variant can be like a classic struct with named fields and their data types
        WEClick { x: i64, y: i64 } // cont√©m um struct an√¥nimo com campos nomeados x e y e os respectivos tipos de dados (i64).
    }

    /*
    Uma forma de resolver os requisitos de variante de enumera√ß√£o √© definir um struct separado para cada variante na enumera√ß√£o. 
    Em seguida, cada variante na enumera√ß√£o usa o struct correspondente. 
    O struct cont√©m os mesmos dados que foram mantidos pela variante de enumera√ß√£o correspondente. 
    Esse estilo de defini√ß√£o permite que nos refiramos a cada variante l√≥gica de maneira independente.

    O c√≥digo a seguir mostra como usar esse estilo de defini√ß√£o alternativo. 
    Os structs s√£o definidos para manter os dados. 
    As variantes na enumera√ß√£o s√£o definidas para se referirem aos structs.
     */
    // Define a tuple struct
    struct KeyPress(String, char);

    // Define a classic struct
    struct MouseClick { x: i64, y: i64 }

    // Redefine the enum variants to use the data from the new structs
    // Update the page Load variant to have the boolean type
    enum WebEvent { WELoad(bool), WEClick(MouseClick), WEKeys(KeyPress) }

    // Instantiate enums
    /* Agora, vamos adicionar c√≥digo para criar inst√¢ncias de nossas variantes de enumera√ß√£o. 
    Para cada variante, usamos a palavra-chave let para fazer a atribui√ß√£o. 
    Para acessar a variante espec√≠fica na defini√ß√£o de enumera√ß√£o, usamos a sintaxe <enum>::<variant> com dois-pontos duplos ::.
     */
    let we_load = WebEvent::WELoad(true);
    // Instantiate a MouseClick struct and bind the coordinate values
    let click = MouseClick { x: 100, y: 250 };

    // Set the WEClick variant to use the data in the click struct
    let we_click = WebEvent::WEClick(click);

    // Instantiate a MouseClick struct and bind the coordinate values
    let click = MouseClick { x: 100, y: 250 };

    // Set the WEClick variant to use the data in the click struct
    let we_click = WebEvent::WEClick(click);


    // Set the Debug flag so we can check the data in the output
    // #[derive(Debug)]

    /* A sintaxe #[derive(Debug)] nos permite ver determinados valores durante a execu√ß√£o do c√≥digo que, de outra forma, 
    n√£o podem ser visualizados na sa√≠da padr√£o. Para exibir dados de depura√ß√£o com a macro println!, usamos a sintaxe {:#?} 
    para formatar os dados de maneira leg√≠vel. 
    */


}